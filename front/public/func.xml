<?xml version="1.0" encoding="utf-8" ?>
<functions>
  <catalogy name="数据集">
    <function  name="group()" >
      参数说明：
      select_exp：	选出的分组表达式，可以是字段列名。
      当然也可以是表达式
      filter_exp: 	数据过滤表达式。

      函数示例：
      ds1.group( ds1.name )
      从数据源ds1中选取name字段，并按照name列进行分组，取出每一组第一条记
      录的name字段的值, 不排序

      ds1.group( ds1.name,ds1.sex=='1').asc()
      从数据源ds1中选取性别为男性的name字段列的值并升序排列，然后按照name
      字段进行分组，取出每一组第一条记录的name字段的值

      ds1.group( ds1.name, ds1.sex=='1').desc(ds1.id)
      从数据源ds1中选取性别为男性的name字段列的值并按id字段降序排列

      返回值：
      一组数据的集合

    </function>
    <function  name="select()" >
      select(select_expr[,cond_expr])
    </function>

    <function  name="distinct_count()" >
      distinct_count(select_expr[,cond_expr])
    </function>
    
    <function  name="sum()" >
      ds.sum(被累加的表达式，条件)
      满足条件的数据集中的被累加的表达式的求和
    </function>
    <function  name="max()" >
      ds.sum(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求最大
    </function>
    <function  name="min()" >
      ds.sum(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求最小
    </function>
    <function  name="avg()" >
      ds.avg(被计算的表达式，条件)
      满足条件的数据集中的被累加的表达式的求平均
    </function>
    <function  name="select1()" ></function>
    <function  name="colcount()" >
函数说明：
数据集的列数
语法：
datasetName.cols()
    </function>
    <function  name="count()" >
      ds.sum(条件)
      满足条件的数据集中的个数
    </function>
    <function  name="colName()" >
      ds.colName(col_cnt)
      数据集的第col_cnt列的名字
    </function>
    <function  name="valueForColName()" >
      函数说明：
      取数据集的列
      语法：
      datasetName.valueForColName( stringExp )
      datasetName.valueForColName( intExp )
      参数说明：
      stringExp 	返回数据集列名的表达式
      intExp		返回数据集列号的表达式
    </function>
    <function  name="getDataSourceName()" >
      函数说明：
      取数据集的的数据源名称
      语法：
      datasetName.getDataSourceName( )
    </function>
  </catalogy>
   <catalogy name="单元格函数">
    <function  name="ifEmpty(,)" >
      函数说明：
      从前往后，参数如果不为null或空字符串，就返回当前参数值，如果都是为空，就返回""
      语法：
      ifEmpty(ValueExp1, ValueExp2,..... )
    </function>
      <function  name="iif(,,)" >
      函数说明：
      根据布尔表达式的不同结果，返回不同的值
      语法：
      iif([boolExp, trueValueExp]+, falseValueExp)
      参数说明：
      boolExp			结果为布尔类型的表达式
      trueValueExp		布尔表达式为真时，返回本参数的计算结果，本参数可以是常数或表达式
      falseValueExp		布尔表达式为假时，返回本参数的计算结果，本参数可以是常数或表达式

    例子：iif（param.xxx=='1','x1',param.yyy==2,'x2','x3')
      解释：当param.xxx==1时,返回x1，param.yyy==2时，返回x2，否则返回x3
      优先判断前面的条件

    </function>
      <function  name="switchCase(,,)" >
      
    例子： switchCase(param.xxx,  1,'x1',  2,'x2',  'x3')
	 	解释：当param。xxx为1时,返回x1，为2时，返回x2，否则返回x3

    </function>
    <function  name="sum()" >参数必须是列表</function>
    <function  name="max()" >参数必须是列表</function>
    <function  name="min()" >参数必须是列表</function>
    <function  name="avg()" >参数必须是列表</function>
    <function  name="desc_rank()" > 按降序排名。 数字最大的是第一名。 参数填对应单元格。如：第1名有2个重复，下一个名次是3</function>
    <function  name="asc_rank()" > 按升序排名。数字小大的是第一名。参数填对应单元格。如：第1名有2个重复，下一个名次是3 </function>
    <function  name="desc_dense_rank()" > 按降序做密集排名。数字最大的是第一名。参数填对应单元格。如：第1名有两个重复，下一个名次是2 </function>
    <function  name="asc_dense_rank()" > 按降序做密集排名。数字最小的是第一名。参数填对应单元格。 名次是连续的，如：第1名有两个重复，下一个名次是2  </function>

    <function  name="fromto(,)" >
      fromto(开始值，结束值，步长）
      如：fromto(1,20) 缺省步长为1
      fromto(1,20,2)
    </function>
    <function  name="row()" >
函数说明：
取得当前格所有行的行号
语法：
row()
    </function>
    <function  name="col()" >
函数说明：
取得当前单元格所在列的列号
语法：
col()

    </function>

    <function  name="cellColName()" >
      函数说明：
      取得当前单元格所在列的列名
      语法：
      cellColName()
    </function>


    <function  name="query(,)" >
      query(数据库连接名字,sql语句)
    </function>
    <function  name="range_count(,)" >
      range_count(单元格列表,值1,是否相等,值2,是否相等)
      单元格列表中 大于值1 小于 值2的有多少个
      是否相等：缺省为相等
    </function>
    <function  name="sliding_sum( ,int.MinValue,0)" >
      sliding_sum(求和单元格,左顶格,前面多少个,后面多少个)
      不能用在交叉表的交叉点中
      第一个参数：求和单元格 ，和当前公式的单元格必须是同一个左顶格。例子： c3[&lt;0&gt;]、c3[&lt;0&gt;]{} 、c3[&lt;0&gt;]
      第二个参数，相对当前单元格前面多少个
      第三个参数，相对当前单元格后面多少个
      
    </function>

    <function  name="@value" >本单元格的实际值</function>
    <function  name="floor()" >
      取带小数点的数字的地板值
      floor(3.5)=4
    </function>
    <function  name="ceiling()" >
      取带小数点的数字的天板值
      ceiling(3.5)=3</function>
    <function  name="abs()" >
      绝对值
      abs(-3)=3</function>
    <function  name="qr_code()" >
      二维码： qr_code("文本内容")
      条形码：qr_code("文本内容","CODE_128")
      第二个参数是条码标准，第三个参数是宽，第四个是高。
      二维码缺省宽高是250px
      其他类型缺省宽是300px ，高是30px。
      条码标准可用值为：
        //
        // 摘要:
        //     Aztec 2D barcode format.
        AZTEC = 0x1,
        //
        // 摘要:
        //     CODABAR 1D format.
        CODABAR = 0x2,
        //
        // 摘要:
        //     Code 39 1D format.
        CODE_39 = 0x4,
        //
        // 摘要:
        //     Code 93 1D format.
        CODE_93 = 0x8,
        //
        // 摘要:
        //     Code 128 1D format.
        CODE_128 = 0x10,
        //
        // 摘要:
        //     Data Matrix 2D barcode format.
        DATA_MATRIX = 0x20,
        //
        // 摘要:
        //     EAN-8 1D format.
        EAN_8 = 0x40,
        //
        // 摘要:
        //     EAN-13 1D format.
        EAN_13 = 0x80,
        //
        // 摘要:
        //     ITF (Interleaved Two of Five) 1D format.
        ITF = 0x100,
        //
        // 摘要:
        //     MaxiCode 2D barcode format.
        MAXICODE = 0x200,
        //
        // 摘要:
        //     PDF417 format.
        PDF_417 = 0x400,
        //
        // 摘要:
        //     QR Code 2D barcode format.
        QR_CODE = 0x800,
        //
        // 摘要:
        //     RSS 14
        RSS_14 = 0x1000,
        //
        // 摘要:
        //     RSS EXPANDED
        RSS_EXPANDED = 0x2000,
        //
        // 摘要:
        //     UPC-A 1D format.
        UPC_A = 0x4000,
        //
        // 摘要:
        //     UPC-E 1D format.
        UPC_E = 0x8000,
        //
        // 摘要:
        //     UPC/EAN extension format. Not a stand-alone format.
        UPC_EAN_EXTENSION = 0x10000,
        //
        // 摘要:
        //     MSI
        MSI = 0x20000,
        //
        // 摘要:
        //     Plessey
        PLESSEY = 0x40000,
        //
        // 摘要:
        //     Intelligent Mail barcode
        IMB = 0x80000,
        //
        // 摘要:
        //     Pharmacode format.
        PHARMA_CODE = 0x100000,
        //
        // 摘要:
        //     UPC_A | UPC_E | EAN_13 | EAN_8 | CODABAR | CODE_39 | CODE_93 | CODE_128 | ITF
        //     | RSS_14 | RSS_EXPANDED without MSI (to many false-positives) and IMB (not enough
        //     tested, and it looks more like a 2D)
        All_1D = 0xF1DE

      </function>
        
  </catalogy>
  <catalogy name="集合函数">
    <function  name="union_set()" >
      使用方法：union_set([ds.group(ds.key)]+, (sort)? )
      对各分组集合的ds.key求并集
    </function>
    <function  name="intersection_set()" >
      使用方法：intersection_set([ds.group(ds.key)]+, (sort)? )
      对各分组集合的ds.key求交集
    </function>
    <function  name="subtract_set()" >
      使用方法：subtract_set([ds.group(ds.key)]+, (sort)? )
      以第一个分组为主集合，减去其他各集合的元素
    </function>
    <function  name="leftJoin_set(,,)" >
      求集合的左外连接集
      leftJoin:分两种情况，一种是第一个参数是类似ds.select(ds.aa),那么第二个参数可以是ds中的任意其他字段
      第二种情况是：第一个参数ds.group(ds.xx),那么第二个参数必须也是ds.xx，否则就会造成数据混乱
      第三个参数可以是任意其他集合计算.
      该方法将会先计算第一、三个参数的数据集，然后计算循环第一个数据集中的每条数据，
      按第二个参数取第三个数据集中对应的项目添加到第一个数据集中
      显示值与连接条件没有关系
      例子：
      =leftJoin_set(
      ds_quanyuan.select(ds_quanyuan.xxxx),
      ds_quanyuan.fullsalesno,
      union_set(
      ds.select(ds.fullsalesno),
      sz_kehu.select(sz_kehu.fullsalesno)
      )
      单元格显示的值将为：ds_quanyuan.xxxx,
      )
    </function>

  </catalogy>
  <catalogy name="日期函数">
    <function  name="date(,,)" >
      使用方法：
      date(year,month,day)
    </function>
    <function  name=".AddDays()" >
      必须是日期型变量才能使用
      使用方法：date(2014,1,2).AddDays(-1)
      结果：2014-1-1
    </function>
    <function  name=".AddMonths()" >
      必须是日期型变量才能使用
      使用方法：date(2014,2,2).AddMonths(-1)
      结果：2014-1-2
    </function>
    <function  name=".AddYears()" >
      必须是日期型变量才能使用
      使用方法：date(2014,2,2).AddYears(-1)
      结果：2013-2-2
    </function>
    <function   name="today()" >  当天  </function>
    <function  name="prevDay()" >  昨天  </function>
    <function  name="firstDayOfYear()" >  指定日期的当年第一天  </function>
    <function  name="prevMonth()" >  上月同一天  </function>
    <function  name="prevYear()" >  上年同一天  </function>
    <function  name="quaterEnd()" >  本季度最后一天  </function>
    <function  name="quaterBegin()" > 本季度第一天   </function>
    <function  name="monthEnd()" >  本月最后一天  </function>
    <function  name="monthBegin()" > 本月第一天   </function>
    <function  name="weekBegin()" >  本周第一天  </function>
    <function  name="weekEnd()" > 本周最后一天   </function>
    <function  name="weekNum()" > 星期几   </function>
    <function  name="year()" >  年  </function>
    <function  name="quater()" >  季度  </function>
    <function  name="month()" >  月  </function>
    <function  name="dayOfYear()" > 本年的几天   </function>
    <function  name="dayOfMonth()" > 本月的几天   </function>
    <function  name="hour()" > 24小时制的小时   </function>
    <function  name="minute()" > 分钟   </function>
    <function  name="second()" > 秒   </function>
    <function  name="formatDatetime()" >
格式化日期
G 年代标志符   y 年   M 月   d 日
h 时 在上午或下午 (1~12)   H 时 在一天中 (0~23)
m 分   s 秒   S 毫秒   E 星期   D 一年中的第几天
F 一月中第几个星期几   w 一年中第几个星期   W 一月中第几个星期
a 上午 / 下午 标记符   k 时 在一天中 (1~24)
K 时 在上午或下午 (0~11)
z 时区

缺省格式为：yyyy-MM-dd
如果第一个参数不是日期类型，那么将使用缺省格式分析该字符串，将之装换为日期后再格式化
举例：formatDatetime('2007-01-01','yyyy年MM月dd日HH时mm分ss秒')
formatDatetime('2007-01-01')
    </function>
  </catalogy>
  <catalogy name="字符串函数">
    <function  name="replaceStr(,,)" >
      replaceStr(源字符串,被替换字符串,替换字符串)
    </function>
    <function  name="substring(,,)" >
      substring(源字符串,开始位置,结束位置)
    </function>
    <function  name="length()" >
      length(字符串) 字符串长度
    </function>
    <function  name="indexof(,,)" >
      indexof(目标字符串,被查找字符串,(开始查找的位置)?)
    </function>
    <function  name="isEmpty()" >
      isEmpty(目标)
      如果目标为NULL返回true
      如果不是字符串,做toString()后作为字符串判断
      如果是字符串，且等于"",返回true
    </function>  
    <function  name="split(,)" >
      split(源字符串,分割符)
    </function> 
    <function  name="formatNumber()" >
      格式化数字。
      缺省格式：###########0.##
      如： formatNumber(1234.567) 输出为 1234.57
      如要指定格式，在第二个参数写格式。
      如：formatNumber(1234,567,"#####.0000")输出为：1234.5670
    </function>
    <function  name="ByteArrToBase64String()" >
      如果数据集字段是Blob等字节数组， 为了能通过网页传输，可以使用这个函数将字节数组转换为base64字符串形式。
      如果是图片，我们可以使用类似以下的公式，将图片显示到网页上。
      =iif(ds.img!=null,"\<img style='width:60px;height:60px' src='data:image/png;base64,"
                        +ByteArrToBase64String(ds.img) +"'>"
          ,'')
    </function>
    <function  name="replicate(,)" >
      将目标字符串重复指定次数
      =replicate("abc",3)
    </function>
    <function  name="left(,)" >
      将目标字符串重复指定次数
      =left("123456789",3) //返回123
    </function>
    <function  name="right(,)" >
      将目标字符串重复指定次数
      =right("123456789",3)// 返回789
    </function>
  </catalogy>
</functions>
